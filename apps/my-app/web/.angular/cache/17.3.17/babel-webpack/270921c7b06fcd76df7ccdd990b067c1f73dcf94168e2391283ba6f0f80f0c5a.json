{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n      const storedUser = localStorage.getItem('currentUser');\n      this.currentUserSubject = new BehaviorSubject(storedUser ? JSON.parse(storedUser) : null);\n      this.currentUser = this.currentUserSubject.asObservable();\n    }\n    get currentUserValue() {\n      return this.currentUserSubject.value;\n    }\n    login(username, password) {\n      return this.http.post(`${environment.apiUrl}/auth/login`, {\n        username,\n        password\n      }).pipe(map(response => {\n        if (response && response.token) {\n          localStorage.setItem('authToken', response.token);\n          localStorage.setItem('currentUser', JSON.stringify(response.user));\n          this.currentUserSubject.next(response.user);\n        }\n        return response.user;\n      }));\n    }\n    logout() {\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('currentUser');\n      this.currentUserSubject.next(null);\n    }\n    getToken() {\n      return localStorage.getItem('authToken');\n    }\n    isAuthenticated() {\n      return !!this.getToken();\n    }\n    static {\n      this.ɵfac = function AuthService_Factory(t) {\n        return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: AuthService,\n        factory: AuthService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}