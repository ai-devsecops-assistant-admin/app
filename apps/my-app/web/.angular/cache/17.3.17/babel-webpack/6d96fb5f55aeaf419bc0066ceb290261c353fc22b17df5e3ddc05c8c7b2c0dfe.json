{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../../core/services/api.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"../../shared/components/loading-spinner/loading-spinner.component\";\nimport * as i4 from \"./components/metrics-widget/metrics-widget.component\";\nfunction DashboardComponent_app_loading_spinner_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-loading-spinner\");\n  }\n}\nfunction DashboardComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 3);\n    i0.ɵɵelement(1, \"app-metrics-widget\", 4)(2, \"app-metrics-widget\", 5)(3, \"app-metrics-widget\", 6)(4, \"app-metrics-widget\", 7);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"value\", ctx_r0.metrics.namingComplianceRate)(\"isPercentage\", true);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"value\", ctx_r0.metrics.totalResources);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"value\", ctx_r0.metrics.violations);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"value\", ctx_r0.metrics.autoFixedIssues);\n  }\n}\nexport let DashboardComponent = /*#__PURE__*/(() => {\n  class DashboardComponent {\n    constructor(apiService) {\n      this.apiService = apiService;\n      this.metrics = null;\n      this.loading = true;\n    }\n    ngOnInit() {\n      this.loadMetrics();\n    }\n    loadMetrics() {\n      this.loading = true;\n      this.apiService.get('/api/v1/metrics/dashboard').subscribe({\n        next: data => {\n          this.metrics = data;\n          this.loading = false;\n        },\n        error: err => {\n          console.error('Failed to load metrics', err);\n          this.loading = false;\n        }\n      });\n    }\n    static {\n      this.ɵfac = function DashboardComponent_Factory(t) {\n        return new (t || DashboardComponent)(i0.ɵɵdirectiveInject(i1.ApiService));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: DashboardComponent,\n        selectors: [[\"app-dashboard\"]],\n        decls: 5,\n        vars: 2,\n        consts: [[1, \"dashboard\"], [4, \"ngIf\"], [\"class\", \"metrics-grid\", 4, \"ngIf\"], [1, \"metrics-grid\"], [\"title\", \"Naming Compliance Rate\", \"unit\", \"%\", 3, \"value\", \"isPercentage\"], [\"title\", \"Total Resources\", 3, \"value\"], [\"title\", \"Active Violations\", \"type\", \"warning\", 3, \"value\"], [\"title\", \"Auto-Fixed Issues\", \"type\", \"success\", 3, \"value\"]],\n        template: function DashboardComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0)(1, \"h1\");\n            i0.ɵɵtext(2, \"DevSecOps Dashboard\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(3, DashboardComponent_app_loading_spinner_3_Template, 1, 0, \"app-loading-spinner\", 1)(4, DashboardComponent_div_4_Template, 5, 5, \"div\", 2);\n            i0.ɵɵelementEnd();\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance(3);\n            i0.ɵɵproperty(\"ngIf\", ctx.loading);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", !ctx.loading && ctx.metrics);\n          }\n        },\n        dependencies: [i2.NgIf, i3.LoadingSpinnerComponent, i4.MetricsWidgetComponent],\n        styles: [\".dashboard[_ngcontent-%COMP%]   h1[_ngcontent-%COMP%]{margin-bottom:2rem;color:#1a1a2e}.metrics-grid[_ngcontent-%COMP%]{display:grid;grid-template-columns:repeat(auto-fit,minmax(250px,1fr));gap:2rem;margin-top:2rem}\"]\n      });\n    }\n  }\n  return DashboardComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}