apiVersion: v1
kind: Namespace
metadata:
  name: flagger-system
  labels:
    name: flagger-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: flagger
  namespace: flagger-system
  labels:
    app.kubernetes.io/name: flagger
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: flagger
  labels:
    app.kubernetes.io/name: flagger
rules:
  - apiGroups:
      - ""
    resources:
      - events
      - configmaps
      - secrets
      - services
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
  - apiGroups:
      - apps
    resources:
      - deployments
      - daemonsets
    verbs:
      - get
      - list
      - watch
      - update
      - patch
  - apiGroups:
      - autoscaling
    resources:
      - horizontalpodautoscalers
    verbs:
      - get
      - list
      - watch
      - update
      - patch
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
  - apiGroups:
      - flagger.app
    resources:
      - canaries
      - canaries/status
      - metrictemplates
      - metrictemplates/status
      - alertproviders
      - alertproviders/status
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
  - apiGroups:
      - networking.istio.io
    resources:
      - virtualservices
      - destinationrules
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: flagger
  labels:
    app.kubernetes.io/name: flagger
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: flagger
subjects:
  - kind: ServiceAccount
    name: flagger
    namespace: flagger-system
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flagger
  namespace: flagger-system
  labels:
    app.kubernetes.io/name: flagger
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: flagger
  template:
    metadata:
      labels:
        app.kubernetes.io/name: flagger
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
    spec:
      serviceAccountName: flagger
      securityContext:
        runAsNonRoot: true
        runAsUser: 10001
        fsGroup: 10001
      containers:
        - name: flagger
          image: ghcr.io/fluxcd/flagger:1.35.0
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8080
          command:
            - ./flagger
            - -log-level=info
            - -mesh-provider=istio
            - -metrics-server=http://prometheus.observability:9090
            - -include-label-prefix=app.kubernetes.io
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 1000m
              memory: 512Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /healthz
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: flagger
  namespace: flagger-system
  labels:
    app.kubernetes.io/name: flagger
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 8080
      targetPort: 8080
      protocol: TCP
  selector:
    app.kubernetes.io/name: flagger
---
# Flagger Load Tester for automated testing
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flagger-loadtester
  namespace: test
  labels:
    app: flagger-loadtester
spec:
  replicas: 1
  selector:
    matchLabels:
      app: flagger-loadtester
  template:
    metadata:
      labels:
        app: flagger-loadtester
    spec:
      containers:
        - name: loadtester
          image: ghcr.io/fluxcd/flagger-loadtester:0.31.0
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8080
          command:
            - ./loadtester
            - -port=8080
            - -log-level=info
            - -timeout=1h
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 1000m
              memory: 512Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 10001
---
apiVersion: v1
kind: Service
metadata:
  name: flagger-loadtester
  namespace: test
  labels:
    app: flagger-loadtester
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      targetPort: 8080
      protocol: TCP
  selector:
    app: flagger-loadtester
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: flagger
  namespace: flagger-system
  labels:
    app.kubernetes.io/name: flagger
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: flagger
  endpoints:
    - port: http
      interval: 30s
