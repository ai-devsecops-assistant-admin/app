apiVersion: v1
kind: Namespace
metadata:
  name: falco
  labels:
    name: falco
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: falco
  namespace: falco
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: falco
rules:
  - apiGroups:
      - ""
    resources:
      - nodes
      - namespaces
      - pods
      - replicationcontrollers
      - replicasets
      - services
      - daemonsets
      - deployments
      - events
      - configmaps
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - apps
    resources:
      - daemonsets
      - deployments
      - replicasets
      - statefulsets
    verbs:
      - get
      - list
      - watch
  - nonResourceURLs:
      - /healthz
      - /healthz/*
    verbs:
      - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: falco
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: falco
subjects:
  - kind: ServiceAccount
    name: falco
    namespace: falco
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: falco-config
  namespace: falco
data:
  falco.yaml: |
    rules_file:
      - /etc/falco/falco_rules.yaml
      - /etc/falco/falco_rules.local.yaml
      - /etc/falco/rules.d
      - /etc/falco/platform-governance-rules.yaml

    plugins:
      - name: k8saudit
        library_path: libk8saudit.so
        init_config: ""
        open_params: "http://:9765/k8s-audit"
      - name: json
        library_path: libjson.so

    load_plugins: [k8saudit, json]

    stdout_output:
      enabled: true

    syslog_output:
      enabled: false

    file_output:
      enabled: true
      keep_alive: false
      filename: /var/log/falco/events.txt

    grpc:
      enabled: true
      bind_address: "0.0.0.0:5060"
      threadiness: 8

    grpc_output:
      enabled: true

    http_output:
      enabled: true
      url: "http://falcosidekick:2801"

    json_output: true
    json_include_output_property: true
    json_include_tags_property: true

    priority: debug

    buffered_outputs: false

    syscall_event_drops:
      threshold: 0.1
      actions:
        - log
        - alert

    syscall_event_timeouts:
      max_consecutive: 1000

    output_timeout: 2000

    metadata_download:
      max_mb: 100
      chunk_wait_us: 1000
      watch_freq_sec: 1
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: falco
  namespace: falco
  labels:
    app: falco
spec:
  selector:
    matchLabels:
      app: falco
  template:
    metadata:
      labels:
        app: falco
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8765"
    spec:
      serviceAccountName: falco
      hostNetwork: true
      hostPID: true
      tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
      containers:
        - name: falco
          image: falcosecurity/falco-no-driver:0.37.0
          imagePullPolicy: IfNotPresent
          args:
            - /usr/bin/falco
            - --cri
            - /run/containerd/containerd.sock
            - -K
            - /var/run/secrets/kubernetes.io/serviceaccount/token
            - -k
            - https://kubernetes.default
            - -pk
          env:
            - name: FALCO_K8S_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: FALCO_BPF_PROBE
              value: ""
          resources:
            requests:
              cpu: 100m
              memory: 512Mi
            limits:
              cpu: 1000m
              memory: 1Gi
          securityContext:
            privileged: true
          volumeMounts:
            - name: dev-fs
              mountPath: /host/dev
            - name: proc-fs
              mountPath: /host/proc
              readOnly: true
            - name: boot-fs
              mountPath: /host/boot
              readOnly: true
            - name: lib-modules
              mountPath: /host/lib/modules
              readOnly: true
            - name: usr-fs
              mountPath: /host/usr
              readOnly: true
            - name: etc-fs
              mountPath: /host/etc
              readOnly: true
            - name: config
              mountPath: /etc/falco
            - name: rules
              mountPath: /etc/falco/rules.d
            - name: run-containerd
              mountPath: /run/containerd
            - name: var-run
              mountPath: /var/run
            - name: logs
              mountPath: /var/log/falco
        - name: falco-exporter
          image: falcosecurity/falco-exporter:0.8.3
          imagePullPolicy: IfNotPresent
          args:
            - /usr/bin/falco-exporter
            - --client-socket=unix:///var/run/falco/falco.sock
            - --timeout=45s
          ports:
            - name: metrics
              containerPort: 9376
              protocol: TCP
          resources:
            requests:
              cpu: 10m
              memory: 32Mi
            limits:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
          volumeMounts:
            - name: var-run
              mountPath: /var/run/falco
      volumes:
        - name: dev-fs
          hostPath:
            path: /dev
        - name: proc-fs
          hostPath:
            path: /proc
        - name: boot-fs
          hostPath:
            path: /boot
        - name: lib-modules
          hostPath:
            path: /lib/modules
        - name: usr-fs
          hostPath:
            path: /usr
        - name: etc-fs
          hostPath:
            path: /etc
        - name: config
          configMap:
            name: falco-config
        - name: rules
          configMap:
            name: falco-rules
        - name: run-containerd
          hostPath:
            path: /run/containerd
        - name: var-run
          emptyDir: {}
        - name: logs
          hostPath:
            path: /var/log/falco
            type: DirectoryOrCreate
---
apiVersion: v1
kind: Service
metadata:
  name: falco
  namespace: falco
  labels:
    app: falco
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - port: 5060
      targetPort: 5060
      protocol: TCP
      name: grpc
    - port: 9376
      targetPort: 9376
      protocol: TCP
      name: metrics
  selector:
    app: falco
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: falco
  namespace: falco
  labels:
    app: falco
spec:
  selector:
    matchLabels:
      app: falco
  endpoints:
    - port: metrics
      interval: 30s
